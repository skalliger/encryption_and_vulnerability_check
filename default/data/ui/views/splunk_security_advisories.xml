
<dashboard version="2" theme="dark">
    <label>Splunk Security Advisories</label>
    <description>Display information about provided Splunk Vulnerability Disclosure (SVDs) and the status in this environment. Drilldowns work on the SVD IDs only.</description>
    <definition><![CDATA[
{
	"visualizations": {
		"viz_knx5TtlZ": {
			"type": "splunk.table",
			"options": {
				"count": 55,
				"columnFormat": {
					"Severity": {
						"width": 105
					},
					"SVD": {
						"width": 138
					},
					"Description": {
						"width": 668
					},
					"CVE": {
						"width": 141
					}
				}
			},
			"dataSources": {
				"primary": "ds_AYFYEyRY"
			},
			"eventHandlers": [
				{
					"type": "drilldown.setToken",
					"options": {
						"tokens": [
							{
								"token": "tok_svd",
								"key": "value"
							}
						]
					}
				}
			]
		},
		"viz_s2pV9VOv": {
			"type": "splunk.table",
			"title": "Splunk Environment Upgrade Analysis",
			"description": "We expect all Splunk servers to be on the same version.",
			"dataSources": {
				"primary": "ds_XIiWh31k"
			},
			"options": {
				"showInternalFields": false,
				"columnFormat": {
					"Upgrade necessary?": {
						"data": "> table | seriesByName(\"Upgrade necessary?\") | formatByType(Upgrade_necessary_ColumnFormatEditorConfig)",
						"rowColors": "> table | seriesByName('Upgrade necessary?') | pick(Upgrade_necessary_RowColorsEditorConfig)",
						"rowBackgroundColors": "> table | seriesByName(\"Upgrade necessary?\") | matchValue(Upgrade_necessary_RowBackgroundColorsEditorConfig)",
						"width": 183
					},
					"SVD": {
						"width": 143
					},
					"Current Version": {
						"width": 174
					},
					"Product": {
						"width": 285
					},
					"Target Release": {
						"width": 181
					}
				},
				"count": 5
			},
			"context": {
				"Upgrade_necessary_ColumnFormatEditorConfig": {
					"string": {
						"unitPosition": "after"
					}
				},
				"Upgrade_necessary_RowColorsEditorConfig": [
					"#ffffff"
				],
				"Upgrade_necessary_RowBackgroundColorsEditorConfig": [
					{
						"match": "no",
						"value": "#2f8811"
					},
					{
						"match": "yes",
						"value": "#78062a"
					}
				]
			}
		},
		"viz_YWBX3K1X": {
			"type": "splunk.table",
			"dataSources": {
				"primary": "ds_KMUpbcGh"
			},
			"title": "Complete SVD Mitigation Status",
			"options": {
				"count": 55,
				"columnFormat": {
					"check": {
						"data": "> table | seriesByName(\"check\") | formatByType(checkColumnFormatEditorConfig)",
						"rowColors": "> table | seriesByName('check') | pick(checkRowColorsEditorConfig)",
						"rowBackgroundColors": "> table | seriesByName(\"check\") | matchValue(checkRowBackgroundColorsEditorConfig)"
					},
					"Status": {
						"data": "> table | seriesByName(\"Status\") | formatByType(StatusColumnFormatEditorConfig)",
						"rowColors": "> table | seriesByName('Status') | pick(StatusRowColorsEditorConfig)",
						"rowBackgroundColors": "> table | seriesByName(\"Status\") | matchValue(StatusRowBackgroundColorsEditorConfig)"
					},
					"SVD": {
						"width": 298
					}
				},
				"showInternalFields": false
			},
			"context": {
				"checkColumnFormatEditorConfig": {
					"string": {
						"unitPosition": "after"
					}
				},
				"checkRowColorsEditorConfig": [
					"#ffffff"
				],
				"checkRowBackgroundColorsEditorConfig": [
					{
						"match": "mitigated",
						"value": "#2f8811"
					},
					{
						"match": "vulnerable",
						"value": "#78062a"
					}
				],
				"StatusColumnFormatEditorConfig": {
					"string": {
						"unitPosition": "after"
					}
				},
				"StatusRowColorsEditorConfig": [
					"#ffffff"
				],
				"StatusRowBackgroundColorsEditorConfig": [
					{
						"match": "mitigated",
						"value": "#2f8811"
					},
					{
						"match": "vulnerable",
						"value": "#78062a"
					},
					{
						"match": "manual check",
						"value": "#AD3F20"
					},
					{
						"match": "no action required",
						"value": "#555555"
					},
					{
						"match": "not installed",
						"value": "#2f8811"
					}
				]
			},
			"eventHandlers": [
				{
					"type": "drilldown.setToken",
					"options": {
						"tokens": [
							{
								"token": "tok_svd",
								"key": "value"
							}
						]
					}
				}
			]
		},
		"viz_lk5yLmti": {
			"type": "splunk.table",
			"title": "SVD Details",
			"dataSources": {
				"primary": "ds_mjEIOF9L"
			},
			"options": {
				"columnFormat": {
					"Fix": {
						"width": 384
					},
					"SVD": {
						"width": 203
					}
				}
			}
		},
		"viz_jXBYxpiQ": {
			"type": "splunk.table",
			"title": "Possible Script Errors",
			"description": "used for updating SVD Lookups",
			"dataSources": {
				"primary": "ds_SQLNotCV"
			},
			"options": {
				"showInternalFields": false
			}
		},
		"viz_XdQ1t12b": {
			"type": "splunk.singlevalue",
			"title": "Total mitigated SVDs",
			"dataSources": {
				"primary": "ds_PxneHUjw"
			},
			"options": {
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"backgroundColor": "#000000",
				"majorColor": "#53a051"
			}
		},
		"viz_RVSaJVXY": {
			"type": "splunk.singlevalue",
			"title": "Total count of vulnerable SVDs",
			"dataSources": {
				"primary": "ds_1Sfkxq3d"
			},
			"options": {
				"majorValue": "> sparklineValues | lastPoint()",
				"trendValue": "> sparklineValues | delta(-2)",
				"sparklineValues": "> primary | seriesByName('count')",
				"trendColor": "#dc4e41",
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"majorColor": "#dc4e41",
				"backgroundColor": "#000000"
			}
		},
		"viz_JoCssv3L": {
			"type": "splunk.singlevalue",
			"title": "Total Count of SVDs",
			"dataSources": {
				"primary": "ds_B8ukx5Hk"
			},
			"options": {
				"backgroundColor": "#000000"
			}
		},
		"viz_PBKPsNRb": {
			"type": "splunk.singlevalue",
			"title": "Informational or Not Applicable",
			"dataSources": {
				"primary": "ds_VoWEkkke"
			},
			"options": {
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"backgroundColor": "#000000",
				"majorColor": "#f8be34"
			}
		},
		"viz_C2DHgTZa": {
			"type": "splunk.singlevalue",
			"title": "Requires manual Check",
			"dataSources": {
				"primary": "ds_x59YyVin"
			},
			"options": {
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"majorColor": "#f1813f",
				"backgroundColor": "#000000"
			}
		}
	},
	"dataSources": {
		"ds_QE5DCJOA": {
			"type": "ds.search",
			"options": {
				"query": "| inputlookup svd_mitigation\n| fields *\n| search severity IN ($tok_sev$)\n",
				"queryParameters": {
					"earliest": "$tok_time.earliest$",
					"latest": "$tok_time.latest$"
				}
			},
			"name": "Get_all_SVDs"
		},
		"ds_60dLzxlf": {
			"type": "ds.search",
			"options": {
				"query": "| inputlookup svd_mitigation\n| fields severity\n| stats values(severity) AS sev\n| mvexpand sev",
				"queryParameters": {
					"earliest": "$tok_time.earliest$",
					"latest": "$tok_time.latest$"
				}
			},
			"name": "Get_all_Severities"
		},
		"ds_mjEIOF9L": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| search svd_id=\"$tok_svd$\"\n| table svd_id, note, url\n| sort - svd_id\n| rename svd_id AS SVD, note AS Fix, url AS URL"
			},
			"name": "get_specific_mitigation"
		},
		"ds_AYFYEyRY": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| search svd_id=$tok_svdName$\n| table svd_id, severity, title, cve\n| sort - svd_id\n| rename svd_id, AS SVD, severity AS Severity, title AS Description, cve AS CVE"
			},
			"name": "list_all_svds_table"
		},
		"ds_XIiWh31k": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| fields svd_id \n| search svd_id=\"$tok_svd$\" \n| lookup svd_upgrade_checks svd_id AS svd_id \n| lookup svd_app_upgrade_checks svd_id AS svd_id OUTPUTNEW \n| lookup svd_uf_upgrade_checks svd_id AS svd_id OUTPUTNEW \n| fields - check*, *_t, *_a \n| eval currentVersion = mvdedup(currentVersion), currentUfVersion = mvdedup(version), evalProduct = mvdedup(evalProduct) , evalUf = mvdedup(evalUf), getVersion = mvdedup(getVersion), version = mvdedup(version), targetVersion = mvdedup(targetVersion), upgradeNecessary = mvdedup(upgradeNecessary) \n| eval currentVersion = if(isnull(currentVersion), getVersion, currentVersion) \n| eval currentVersion = if(isnull(currentVersion), currentUfVersion, currentVersion) \n| eval version = mvjoin(version, \", \") \n| eval currentVersion = case(\n    (evalProduct==\"Splunk Enterprise\" AND evalUf==\"Universal Forwarder\"), mvzip(getVersion, version, \", \"),\n    isnull(currentVersion), getVersion,\n    (isnull(currentVersion) AND isnull(getVersion)), currentUfVersion,\n    1==1, currentVersion\n    ) \n| eval product = case (\n    ``` special case - when an SVD affect Enterprise and UFs ```\n    (evalProduct==\"Splunk Enterprise\" AND evalUf==\"Universal Forwarder\"), mvzip(evalProduct, evalUf, \" and \"),\n    ``` put in UF ```\n    (isnull(evalProduct) AND isnull(label)), evalUf,\n    ``` put in App/Add-on name ```\n    (isnull(evalUf) AND isnull(evalProduct)), label,\n    ``` put in Splunk Enterprise ```\n    (isnull(label) AND isnull(evalUf)), evalProduct,\n    isnull(evalProduct) AND isnull(label) AND isnull(evalUf), \"none\",\n    1==1, \"unknown\"\n    ) \n| eval product = if(isnull(product), \"none\", product) \n| fields - label, evalProduct, evalUf, getVersion, currentUfVersion, version \n| stats values(targetVersion) AS tv, values(currentVersion) AS currVersion, values(upgradeNecessary) AS mvUpgr, values(mitFlag) as mvMitFlag by svd_id product \n| eval currVersion = if(isnull(currVersion), \"none\", currVersion) \n| eval mvTargetVersion = mvjoin(tv, \" or \") \n| eval mvCurrentVersion = mvjoin(currVersion, \", \") \n    ``` Here we have to set the upgrade check to \"no\" if we have a matching version active``` \n| eval upgrade=if(match(mvMitFlag, \"mitigated\"), \"no\", if(match(mvUpgr, \"yes\"), \"yes\", \"no\")) \n| fields - tv, mvUpgr, currVersion, mvMitFlag \n| sort - svd_id \n| where NOT (currVersion LIKE \"none\") AND NOT product LIKE \"none\" \n| table svd_id, product, upgrade,mvCurrentVersion, mvTargetVersion * \n| rename svd_id AS SVD, product AS Product, mvTargetVersion AS \"Target Release\", upgrade AS \"Upgrade necessary?\", mvCurrentVersion AS \"Current Version\""
			},
			"name": "get_mitigation_status"
		},
		"ds_KMUpbcGh": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| fields svd_id, note\n``` \n    In order to get all SVDs only once, we have seperated the SVDs into Splunk Enterprise, Apps and Universal Forwarders \n    Enterprise = upgradeNecessary, mitFlag\n    Apps/Add-ons = upgradeNecessary2, mitFlag2\n    UFs = upgradeNecessary3, mitFlag3\n``` \n| lookup svd_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary, mitFlag \n| lookup svd_app_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary AS upgradeNecessary2, mitFlag AS mitFlag2 \n| lookup svd_uf_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary AS upgradeNecessary3, mitFlag AS mitFlag3\n\n``` \n    This lookup gets populated by manually(!) running the \"populate_manual_checks_lookup\" report. After that, put in the lookup which ones you have checked.\n    Or simply modify the report to output a yes in the checkDone column. ```\n| lookup svd_manual_checks svd_id AS svd_id OUTPUTNEW checkDone AS checkDone \n\n``` \n    The checks here aren't that hard, except for one situation. When we have multiple target releases for a fix AND our version is exactly one of them, we ran into issues in the past. \n    That's why we set an additional flag ONLY if our current version is exactly the same as the required version (as there are probably mutliple fixed versions listed in an SVD). \n    In that case, we don't need all the other release checks.\n``` \n| eval upgradeNecessary = if(isnull(upgradeNecessary) AND isnull(upgradeNecessary3), upgradeNecessary2, upgradeNecessary) \n| eval upgradeNecessary = if(isnull(upgradeNecessary) AND isnull(upgradeNecessary2), upgradeNecessary3, upgradeNecessary) \n| eval mitFlag = if(isnull(mitFlag) AND isnull(mitFlag3), mitFlag2, mitFlag) \n| eval mitFlag = if(isnull(mitFlag) AND isnull(mitFlag2), mitFlag3, mitFlag) \n| eval dd = mvdedup(upgradeNecessary) \n| eval ddMit = mvdedup(mitFlag) \n| fields - mitFlag, mitFlag* \n| eval dd=if(match(ddMit, \"mitigated\"), \"no\", if(match(upgradeNecessary, \"yes\"), \"yes\", dd)) \n| eval check = case(\n    ``` OLD - need to verify this works now without checking for \"no\" and \"NOT yes\": we check for yes AND no due to checking against multiple releases. if one verison has a \"yes\", we need to upgrade ```\n    ``` dd==\"no\" AND dd!=\"yes\", \"mitigated\", ```\n    dd==\"no\", \"mitigated\",\n    dd==\"yes\", \"vulnerable\",\n    dd==\"not installed\", \"not installed\",\n    isnull(dd), \"manual check\",\n    1==1, \"unknown\"\n    ) \n    ``` get PYTHONHTTPS ``` \n| join type=left svd_id \n    [| inputlookup pythonhttps_status \n    | eval status = case (\n        status=0, \"disabled\",\n    status=1, \"enabled\",\n    status==\"enabled\", status,\n    status==\"disabled\", status,\n    1==1, \"unknown\"\n    ) \n| eval mitigated = case(\n    status==\"enabled\", \"mitigated\",\n    status==\"disabled\", vulnerable,\n    1==1, \"unknown\"\n    ) \n| eval svd_id=\"SVD-2022-0601\" \n| fields svd_id, mitigated \n| rename mitigated AS pyMitigation ] \n    ``` get Deployment Server authentication-related SVDs ``` \n| join type=left svd_id \n    [| rest /services/configs/conf-restmap splunk_server=* \n        ``` join to only get the DS ``` \n    | join splunk_server \n        [| rest /services/server/roles splunk_server=* \n        | search role_list=deployment_server \n        | fields splunk_server ] \n    | fields title, splunk_server, requireAuthentication \n    | search title=\"broker:broker\" OR title=\"streams:deployment\" \n| eval config=\"restmap.conf\" \n| table splunk_server, config, title, requireAuthentication\n    ``` check for the use of DS authentication ``` \n    | eval DSAuthenticationInUse = case( \n        title==\"broker:broker\" AND (requireAuthentication=0 OR requireAuthentication==\"false\"), \"no\",\n    title==\"streams:deployment\" AND (requireAuthentication=0 OR requireAuthentication==\"false\"), \"no\",\n    title==\"broker:broker\" AND (requireAuthentication=1 OR requireAuthentication==\"true\"), \"yes\",\n    title==\"streams:deployment\" AND (requireAuthentication=1 OR requireAuthentication==\"true\"), \"yes\",\n    1==1, \"unknown\"\n    ) \n| eval svd_id= mvappend(\"SVD-2022-0608\", \"SVD-2022-0607\") \n| stats values(DSAuthenticationInUse) AS DSAuthInUse by svd_id \n| table svd_id, DSAuthInUse \n| eval dsStatus = case(\n    DSAuthInUse==\"no\", \"vulnerable\",\n    DSAuthInUse==\"yes\", \"mitigated\",\n    1==1, \"unknown\"\n    ) \n| fields svd_id, dsStatus ] \n| join type=left svd_id \n[| rest /services/configs/conf-server splunk_server=* \n| search title IN (\"pythonSslClientConfig\", \"kvstore\", \"sslConfig\") \n| fields title, splunk_server, *Verify* \n| eval mitigationStatus = case(\n    title==\"sslConfig\" AND (cliVerifyServerName=1 OR cliVerifyServerName==\"true\") AND (sslVerifyServerCert=1 OR sslVerifyServerCert==\"true\") AND (sslVerifyServerName=1 OR sslVerifyServerName==\"true\"), \"mitigated\",\n    ``` Splunk v.9.0.5: somehow there is no default for \n        [ sslConfig] sslVerifyServerCert, so we have to check for isnull() as well ```\n        title==\"sslConfig\" AND (cliVerifyServerName=0 OR cliVerifyServerName==\"false\") AND (sslVerifyServerCert=0 OR sslVerifyServerCert==\"false\" OR isnull(sslVerifyServerCert)) AND (sslVerifyServerName=0 OR sslVerifyServerName==\"false\"), \"vulnerable\", \n    title==\"kvstore\" AND (sslVerifyServerCert=1 OR sslVerifyServerCert==\"true\") AND (sslVerifyServerName=1 OR sslVerifyServerName==\"true\"), \"mitigated\",\n    title==\"kvstore\" AND (sslVerifyServerCert=0 OR sslVerifyServerCert==\"false\") AND (sslVerifyServerName=0 OR sslVerifyServerName==\"false\"), \"vulnerable\", \n    title==\"pythonSslClientConfig\" AND (sslVerifyServerCert=1 OR sslVerifyServerCert==\"true\") AND (sslVerifyServerName=1 OR sslVerifyServerName==\"true\"), \"mitigated\",\n    title==\"pythonSslClientConfig\" AND (sslVerifyServerCert=0 OR sslVerifyServerCert==\"false\") AND (sslVerifyServerName=0 OR sslVerifyServerName==\"false\"), \"vulnerable\", \n    1==1, \"unknown\"\n    ) \n| eval config=\"server.conf\" \n| eval svd_id = case(\n    title==\"sslConfig\", mvappend(\"SVD-2022-0602\", \"SVD-2022-0603\", \"SVD-2022-0606\"),\n    title==\"kvstore\", mvappend(\"SVD-2022-0602\", \"SVD-2022-0603\"),\n    title==\"pythonSslClientConfig\", \"SVD-2022-0601\", \n    1==1, \"unknown\"\n    ) \n| mvexpand svd_id \n| stats values(mitigationStatus) AS tlsStatus by svd_id ] \n| eval check = if(isnull(upgradeNecessary) AND isnull(upgradeNecessary2), \"manual check\", check)\n    ``` These are informational SVDs with no action required ``` \n    ``` these are the joined SVDs with custom checks (see appends above).\n    This way we override the old check (which is in state \"manual\" and thus can remove all events with empty checks later on.``` \n| eval check = case(\n    svd_id==\"SVD-2022-0607\", dsStatus,\n    svd_id=\"SVD-2022-0608\", dsStatus,\n    1==1, check\n    ) \n    ``` TLS verfication checks ``` \n| eval check = case(\n     ``` here we check the lookup \"svd_manual_checks\" for any manually checked SVDs which we can't automate ```\n     (check==\"manual check\" AND (checkDone==\"yes\" OR checkDone==\"true\" OR checkDone=1)), \"mitigated\",\n    ``` SVD-2022-0601 is special as it requires multiple config checks\n    We could output something like \"halfway mitigated\" but this gets people confused. So if PYTHONHTTPSVERIFY is enabled but \n    [ pythonSslClientConfig] checks have failed, we will still show it as vulnerable. \n    ```\n    svd_id==\"SVD-2022-0606\", tlsStatus,\n    ``` svd_id==\"SVD-2022-0603\", tlsStatus,\n    svd_id==\"SVD-2022-0602\", tlsStatus, ```\n    ``` INFO: Currently kv store sslVerifyServerName is NOT working, so we set this to mitigated if sslVerifyServerCert is enabled, otherwise this is misleading ```\n    svd_id==\"SVD-2022-0603\" AND (tlsStatus==\"mitigated vulnerable\"), \"mitigated\",\n    svd_id==\"SVD-2022-0602\" AND (tlsStatus==\"mitigated vulnerable\"), \"mitigated\",\n    svd_id==\"SVD-2022-0601\" AND (pyMitigation==\"mitigated\") AND (tlsStatus==\"mitigated\"), \"mitigated\",\n    svd_id==\"SVD-2022-0601\" AND (pyMitigation==\"mitigated\") AND (tlsStatus==\"vulnerable\"), tlsStatus,\n    svd_id==\"SVD-2022-0601\" AND (pyMitigation==\"vulnerable\") AND (tlsStatus==\"mitigated\"), pyMitigation,\n    svd_id==\"SVD-2022-0601\" AND (pyMitigation==\"vulnerable\") AND (tlsStatus==\"vulnerable\"), \"vulnerable\",\n    1==1, check\n    ) \n| eval check = if(note==\"none\", \"no action required\", check) \n| fields svd_id, check \n| sort - svd_id \n| table svd_id, check \n| rename svd_id AS SVD, check AS Status \n| search Status IN ($tok_ms_status$)"
			},
			"name": "display_all_mitigations"
		},
		"ds_SQLNotCV": {
			"type": "ds.search",
			"options": {
				"query": "index=_internal component=execprocessor log_level=ERROR \"pull_svd_tables.sh\" OR \"check_python_https.sh\"\n| table _time, host, log_level, event_message\n| sort - _time",
				"queryParameters": {
					"earliest": "$tok_time.earliest$",
					"latest": "$tok_time.latest$"
				}
			},
			"name": "svd_script_errors"
		},
		"ds_PxneHUjw": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"mitigated\"\n| stats count"
			},
			"name": "count_mitigated"
		},
		"ds_1Sfkxq3d": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"vulnerable\"\n| stats count"
			},
			"name": "count_vulnerable"
		},
		"ds_B8ukx5Hk": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "|  stats count"
			},
			"name": "total_count"
		},
		"ds_VoWEkkke": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"not installed\" OR Status LIKE \"no action required\"\n| stats count"
			},
			"name": "count_not_applicable"
		},
		"ds_x59YyVin": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"manual check\"\n| stats count"
			},
			"name": "count_manual"
		}
	},
	"defaults": {
		"dataSources": {
			"ds.search": {
				"options": {
					"queryParameters": {
						"latest": "$global_time.latest$",
						"earliest": "$global_time.earliest$"
					}
				}
			}
		},
		"tokens": {
			"default": {
				"svd_tok": {
					"value": "*"
				},
				"tok_svd": {
					"value": "*"
				}
			}
		}
	},
	"inputs": {
		"input_global_trp": {
			"type": "input.timerange",
			"options": {
				"token": "tok_time",
				"defaultValue": "@d,now"
			},
			"title": "Time Range"
		},
		"input_0jLMFsGQ": {
			"options": {
				"items": [
					{
						"label": "All",
						"value": "*"
					}
				],
				"defaultValue": [
					"*"
				],
				"token": "tok_sev"
			},
			"title": "Severities",
			"type": "input.multiselect",
			"dataSources": {
				"primary": "ds_60dLzxlf"
			}
		},
		"input_LJp1DbeJ": {
			"options": {
				"items": [
					{
						"label": "All",
						"value": "*"
					},
					{
						"label": "Info",
						"value": "\"no action required\""
					},
					{
						"label": "Mitigated",
						"value": "\"mitigated\""
					},
					{
						"label": "Vulnerable",
						"value": "\"vulnerable\""
					},
					{
						"label": "Manual",
						"value": "\"manual check\""
					},
					{
						"label": "Not Applicable",
						"value": "\"not installed\""
					}
				],
				"defaultValue": [
					"*"
				],
				"token": "tok_ms_status"
			},
			"title": "Select Status",
			"type": "input.multiselect"
		},
		"input_yBCxNNiF": {
			"options": {
				"defaultValue": "*",
				"token": "tok_svdName"
			},
			"title": "Search for SVD ID",
			"type": "input.text"
		}
	},
	"layout": {
		"type": "grid",
		"options": {},
		"structure": [
			{
				"item": "viz_JoCssv3L",
				"type": "block",
				"position": {
					"x": 0,
					"y": 0,
					"w": 207,
					"h": 112
				}
			},
			{
				"item": "viz_knx5TtlZ",
				"type": "block",
				"position": {
					"x": 0,
					"y": 112,
					"w": 622,
					"h": 1981
				}
			},
			{
				"item": "viz_lk5yLmti",
				"type": "block",
				"position": {
					"x": 0,
					"y": 2093,
					"w": 1200,
					"h": 336
				}
			},
			{
				"item": "viz_jXBYxpiQ",
				"type": "block",
				"position": {
					"x": 0,
					"y": 2429,
					"w": 1200,
					"h": 333
				}
			},
			{
				"item": "viz_PBKPsNRb",
				"type": "block",
				"position": {
					"x": 207,
					"y": 0,
					"w": 222,
					"h": 112
				}
			},
			{
				"item": "viz_XdQ1t12b",
				"type": "block",
				"position": {
					"x": 429,
					"y": 0,
					"w": 296,
					"h": 112
				}
			},
			{
				"item": "viz_YWBX3K1X",
				"type": "block",
				"position": {
					"x": 622,
					"y": 443,
					"w": 578,
					"h": 1650
				}
			},
			{
				"item": "viz_s2pV9VOv",
				"type": "block",
				"position": {
					"x": 622,
					"y": 112,
					"w": 578,
					"h": 331
				}
			},
			{
				"item": "viz_RVSaJVXY",
				"type": "block",
				"position": {
					"x": 725,
					"y": 0,
					"w": 233,
					"h": 112
				}
			},
			{
				"item": "viz_C2DHgTZa",
				"type": "block",
				"position": {
					"x": 958,
					"y": 0,
					"w": 242,
					"h": 112
				}
			}
		],
		"globalInputs": [
			"input_global_trp",
			"input_0jLMFsGQ",
			"input_yBCxNNiF",
			"input_LJp1DbeJ"
		]
	},
	"description": "Display information about provided Splunk Vulnerability Disclosure (SVDs) and the status in this environment. Drilldowns work on the SVD IDs only.",
	"title": "Splunk Security Advisories"
}
    ]]></definition>
    <meta type="hiddenElements"><![CDATA[
{
	"hideEdit": false,
	"hideOpenInSearch": false,
	"hideExport": true
}
    ]]></meta>
</dashboard>