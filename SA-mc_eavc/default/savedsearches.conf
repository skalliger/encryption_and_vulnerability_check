[default]
[SA-mc_eavc_get_environment]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 1,31 */12 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest splunk_server="*" splunk_server_group="*" /services/server/info\
|  fields - eai:acl.*\
|  eval server = if(isnull(host_fqdn), host, host_fqdn)\
| fields server, version, guid, server_roles, os_name, os_version, cpu_arch, federated_search_enabled, fips_mode, manager_uri, numberOf*, physicalMemoryMB, licenseState, kvStoreStatus, isForwarding, health_info, cluster_label, shcluster_label\
| join type=left title \
    [| search index="app_eavc" sourcetype="eavc:mc_environment" earliest=-14d@d latest=now \
    | stats c AS counter \
    | where counter=0 \
    | require ] \
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate \
| collect index="app_eavc" sourcetype="eavc:mc_environment"

[SA-mc_eavc_hec_status]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 2,32 */12 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/configs/conf-inputs splunk_server=* \
| fields splunk_server, disabled, title, enableSSL, acceptFrom, index, sourcetype, port, useACK, eai:acl.app, serverCert, sslVersions, requireClientCert, forceHttp10, sslCommonNameToCheck, allowSslRenegotiation \
| search (title="http" OR title="http*") eai:acl.app!=system AND (disabled="0" OR disabled="false") \
``` set the last else in the if to "fail" because that's when there is no TLS configured at all ```\
| eval tlsEnabled = if(enableSSL=="1" OR enableSSL="true", "true", if(enableSSL=="false", "false", "false")) \
| join type=left title \
    [| search index="app_eavc" sourcetype="eavc:mc_hec_status" earliest=-14d@d latest=now \
    | stats c AS counter \
    | where counter=0 \
    | require ] \
| eval check = case(\
    ``` first of all, we check whether TLS is enabled, so we don't care if the following checks don't match the condition ```\
    tlsEnabled=="false", "fail",\
    allowSslRenegotiation=="true" OR allowSslRenegotiation=="1", "fail",\
    sslVersions=="tls1.1" OR sslVersions=="tls1.0" OR sslVersions=="sslv3", "fail",\
    requireClientCert=="0" OR requireClientCert=="false", "fail",\
    forceHttp10=="always", "fail",\
    1==1, "pass"\
    ) \
| eval hec_index = index, hec_st = sourcetype\
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate \
| table _time splunk_server, tlsEnabled, disabled, check, title, enableSSL, acceptFrom, hec_index, hec_st, port, useACK, eai:acl.app, serverCert, sslVersions, requireClientCert, forceHttp10, sslCommonNameToCheck, allowSslRenegotiation \
| rename splunk_server AS server, eai:acl.app AS "app_context", title AS stanza \
| sort server\
| collect index="app_eavc" sourcetype="eavc:mc_hec_status"

[SA-mc_eavc_indexer_dic]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 3,33 */12 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = events
display.page.search.tab = events
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /servicesNS/-/-/configs/conf-indexes splunk_server=*\
| fields eai:*, enableDataIntegrityControl, title \
| fields - eai:acl.*, eai:userName \
| join type=left title \
    [| search index=app_eavc sourcetype="eavc:mc_indexer_dic" earliest=-14d@d latest=now \
    | stats c AS counter \
    | where counter=0 \
    | require ] \
| stats values(title) AS indexes by enableDataIntegrityControl \
| mvexpand indexes \
| stats c(indexes) AS indexCount by enableDataIntegrityControl \
| eventstats sum(indexCount) AS totalIndexCount\
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate \
| table _time, enableDataIntegrityControl, indexCount, totalIndexCount\
| collect index="app_eavc" sourcetype="eavc:mc_indexer_dic"

[SA-mc_eavc_indexer_tls]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 4,34 */12 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/configs/conf-inputs splunk_server=* \
| fields splunk_server, disabled, title, eai:acl.app, acceptFrom, allowSslRenegotiation, ecdhCurves, cipherSuite, requireClientCert, serverCert, sslCommonNameToCheck, sslVersions, useSSLCompression \
| search title="splunktcp*" eai:acl.app!="system" AND (disabled="0" OR disabled="false") \
| rex field=title "(?<stanzaCheck>[^:]+)" \
| eval tlsEnabled = if(stanzaCheck=="splunktcp-ssl", "true", if(stanzaCheck=="splunktcp", "false", stanzaCheck)) \
| fields - stanzaCheck \
| join type=left title \
    [| search index="app_eavc" sourcetype="eavc:mc_indexer_tls" earliest=-14d@d latest=now \
    | stats c AS counter \
    | where counter=0 \
    | require ] \
``` hardening checks  ```\
| eval check = case(\
    ``` first of all, we check whether TLS is enabled, so we don't care if the following checks don't match the condition ```\
    tlsEnabled=="false", "fail",\
    allowSslRenegotiation=="true" OR allowSslRenegotiation=="1", "fail",\
    sslVersions=="tls1.1" OR sslVersions=="tls1.0" OR sslVersions=="sslv3", "fail",\
    requireClientCert=="0" OR requireClientCert=="false", "fail",\
    1==1, "pass"\
    ) \
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate \
| table _time, splunk_server, disabled, tlsEnabled, check, title, eai:acl.app, acceptFrom, allowSslRenegotiation, ecdhCurves, cipherSuite, requireClientCert, serverCert, sslCommonNameToCheck, sslVersions, useSSLCompression\
| rename splunk_server AS server, eai:acl.app AS "app_context", title AS stanza \
| sort - server \
| collect index="app_eavc" sourcetype="eavc:mc_indexer_tls"

[SA-mc_eavc_populate_apps]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 5,35 */12 * * *
dispatch.earliest_time = @d
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.page.search.mode = verbose
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/apps/local splunk_server=* \
| fields label, version, splunk_server, title, disabled\
    ``` we keep app_eavc data for 14 days only and it's not a lot\
but we search 15 days just in case. \
| require will check whether there are events found in the eavc:sa_mc_apps sourcetype. If so, the parent search will stop and we don't generate duplicate events ```\
| join type=left title [ | search index="app_eavc" sourcetype="eavc:mc_apps" earliest=-14d@d latest=now \
| stats c AS counter \
| where counter=0 \
| require ] \
| search NOT label IN ("journald_input", "Splunk Get Data In" "Home", "learned", "legacy", "Splunk Assist", "Apps Browser", "*Forwarder", "Instrumentation", "*Alert Action", "Search & Reporting", "introspection*", "sample data", "*RapidDiag", "SA-ITSI*" ) AND (disabled="0" OR disabled="false") \
| eval version = if(isnull(version), "unknown", version) \
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate\
| table _time, splunk_server, label, title, version, disabled \
| rename splunk_server AS server \
| collect index="app_eavc" sourcetype="eavc:mc_apps"

[SA-mc_eavc_populate_ds_auth]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 6,36 */12 * * *
dispatch.earliest_time = @d
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.page.search.mode = verbose
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/configs/conf-restmap splunk_server=* \
    ``` join to only get the DS ``` \
| append [ | search index="app_eavc" sourcetype="eavc:mc_ds_auth" earliest=-15d@d \
| stats c AS counter \
| where counter=0 \
| require ] \
| join splunk_server \
[| rest /services/server/roles splunk_server=* \
| search role_list=deployment_server \
| fields splunk_server ] \
| fields title, splunk_server, requireAuthentication \
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate\
| search title="broker:broker" OR title="streams:deployment" \
| eval config="restmap.conf" \
| table _time, splunk_server, config, title, requireAuthentication \
| rename title AS stanza, splunk_server AS server \
| collect index="app_eavc" sourcetype="eavc:mc_ds_auth"
display.general.type = statistics
display.page.search.tab = statistics

[SA-mc_eavc_populate_server_roles]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 7,37 */12 * * *
dispatch.earliest_time = -15d@d
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.page.search.mode = verbose
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/server/roles splunk_server=* \
``` Unfortunately we need to make this search longer than it needs to be, due to having old roles "cluster master", "cluster slave" and "license master"\
but this is confusing, so we expand, remove and write afterwards```\
| append [ | search index="app_eavc" sourcetype="eavc:mc_server_roles" earliest=-15d@d | stats c AS counter | where counter=0 | require ]\
| stats values(role_list) AS roles by splunk_server\
| mvexpand roles\
``` this is intentional to avoid confusion with the actual splunk_server field ```\
| rename splunk_server AS server\
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S")\
| fields - currDate\
| search NOT roles IN ("cluster_master", "cluster_slave", "license_master")\
| table _time *\
| collect index="app_eavc" sourcetype="eavc:mc_server_roles"
display.general.type = statistics
display.page.search.tab = statistics

[SA-mc_eavc_populate_tls_checks]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 8,38 */12 * * *
dispatch.earliest_time = @d
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/configs/conf-server splunk_server=* \
| search title IN ("pythonSslClientConfig", "kvstore", "sslConfig") \
| fields title, splunk_server, *Verify* \
| eval svd_id = case(\
    title=="sslConfig", mvappend("SVD-2022-0602", "SVD-2022-0603", "SVD-2022-0606"),\
    title=="kvstore", mvappend("SVD-2022-0602", "SVD-2022-0603"),\
    title=="pythonSslClientConfig", "SVD-2022-0601", \
    1==1, "unknown") \
| mvexpand svd_id \
``` the cliVerifyServerName parameter is only set for [sslConfig] ```\
| eval cliVerifyServerName = if(isnull(cliVerifyServerName) OR cliVerifyServerName="", "-1", cliVerifyServerName)\
| eval mitigationStatus = case(\
    title=="kvstore" AND (sslVerifyServerCert="1" OR sslVerifyServerCert="enabled") AND (sslVerifyServerName="1" OR sslVerifyServerName="enabled"), "mitigated",\
    title=="kvstore" AND (sslVerifyServerCert="0" OR sslVerifyServerCert="disabled") OR (sslVerifyServerName="0" OR sslVerifyServerName="disabled"), "vulnerable",\
    title=="pythonSslClientConfig" AND (sslVerifyServerCert="1" OR sslVerifyServerCert="enabled") AND (sslVerifyServerName="1" OR sslVerifyServerName="enabled"), "mitigated",\
    title=="pythonSslClientConfig" AND (sslVerifyServerCert="0" OR sslVerifyServerCert="disabled") OR (sslVerifyServerName="0" OR sslVerifyServerName="disabled"), "vulnerable",\
    title=="sslConfig" AND (sslVerifyServerCert="1" OR sslVerifyServerCert="enabled") AND (sslVerifyServerName="1" OR sslVerifyServerName="enabled") AND (cliVerifyServerName="1" OR cliVerifyServerName="enabled"), "mitigated",\
    title=="sslConfig" AND (sslVerifyServerCert="0" OR sslVerifyServerCert="disabled") OR (sslVerifyServerName="0" OR sslVerifyServerName="disabled") AND (cliVerifyServerName="0" OR cliVerifyServerName="disabled"), "vulnerable",\
    1==1, "unknown"\
    ) \
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate\
| table _time svd_id, mitigationStatus, splunk_server, title, *\
| rename splunk_server as server, title AS stanza\
| join type=left stanza \
    [| search index="app_eavc" sourcetype="eavc:mc_tls_verification" earliest=-14d@d latest=now\
    | stats c AS counter \
    | where counter=0\
    | require ]\
| fields - counter\
| collect index="app_eavc" sourcetype="eavc:mc_tls_verification"

[SA-mc_eavc_populate_webservers]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 9,39 */12 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = events
display.page.search.tab = events
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /servicesNS/-/-/configs/conf-web/settings splunk_server=*\
| fields splunk_server, acceptFrom, allowSslCompression, allowSslRenegotiation, sendStrictTransportSecurityHeader, sslVersions appServerPorts, cipherSuite, disabled, ecdhCurves, enableSplunkWebSSL, enable_insecure_login, httpport, keepAliveIdleTimeout, privKeyPath, serverCert, startwebserver\
| where disabled=0 AND enableSplunkWebSSL=1 AND startwebserver=1\
| join type=left title [ | search index="app_eavc" sourcetype="eavc:mc_webserver" earliest=-14d@d latest=now \
| stats c AS counter \
| where counter=0 \
| require ] \
| rename splunk_server AS server\
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate\
| collect index="app_eavc" sourcetype="eavc:mc_webserver"

[SA-mc_eavc_purge_sourcetypes]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
description = You can run this without deleting data. Delete is inside a comment. Clears SA-mc related data only.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.page.search.mode = verbose
display.visualizations.show = 0
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = index=app_eavc sourcetype="eavc:mc_*" earliest=-15d@d ``` | delete ```\
``` This search will only purge the sourcetypes that are populated by SA-mc_eavc searches (all SA-related sourcetypes start with eavc:mc_). Other data will not be affected.\
It's disabled and just here to make your life easier when you need to ingest the new data after you've made changes to the configs mentioned in the Mitigation Report (or other checks). ```

[SA-mc_eavc_shc_parameters]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
description = Most customers won't have a SHC, so this report is not scheduled by default. Run it to populate the data.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/configs/conf-server splunk_server=* \
| search title=shclustering (disabled=0 OR disabled="false")\
| join type=left title \
    [| search index="app_eavc" sourcetype="eavc:mc_shc_parameters" earliest=-14d@d latest=now \
    | stats c AS counter \
    | where counter=0 \
    | require ] \
| fields _time, title, disabled, eai:acl.app, splunk_server, site, mode, shcluster_label, acceptFrom, servers_list, mgmt_uri, multisite, conf_deploy_* \
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate \
| eval multisite = if(multisite=0, "false", if(multisite=1, "true", multisite)) \
| rename title AS stanza, eai:acl.app AS app_context, splunk_server AS server\
| collect index="app_eavc" sourcetype="eavc:mc_shc_parameters"

[SA-mc_eavc_sig_version]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 10,40 */12 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = SA-mc_eavc
request.ui_dispatch_view = search
search = | rest /services/configs/conf-server splunk_server=* \
| fields splunk_server, title, signatureVersion, legacyCiphers \
| search title="node_auth" OR title="general" \
| join type=left title \
    [| search index="app_eavc" sourcetype="eavc:mc_sig_version" earliest=-14d@d latest=now \
    | stats c AS counter \
    | where counter=0 \
    | require ] \
| rename splunk_server AS server, title AS stanza \
| eval currDate = strftime(now(), "%Y-%m-%d %H:%M:%S") \
| eval _time = strptime(currDate, "%Y-%m-%d %H:%M:%S") \
| fields - currDate \
| fields _time, server, signatureVersion, legacyCiphers \
| collect index="app_eavc" sourcetype="eavc:mc_sig_version"
display.general.type = statistics
display.page.search.tab = statistics

