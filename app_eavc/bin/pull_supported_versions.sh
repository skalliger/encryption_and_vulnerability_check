#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

SCRIPTVERSION="1.0"
LASTUPDATED="2024-10-07"
AUTHOR="Dustin Hoffmann"

### the Splunk server needs a connection to https://raw.githubusercontent.com in order to work
### the script uses wget, md5sum, awk, cp, mktemp and rm (to remove the temporary directory)

# this script checks for new versions of the supported version checks in the lookup tables and 
# if it finds new ones, it overwrites the existing lookups
init()
{
	appPath="${SPLUNK_HOME}/etc/apps/app_eavc"
	lookupPath="${appPath}/lookups"
	tmpDir="${appPath}/tmp"
	rawGitLocation="https://raw.githubusercontent.com/skalliger/encryption_and_vulnerability_check/main/app_eavc/lookups"

	core="svd_splunk_core_supported_versions.csv"
	es="svd_splunk_es_supported_versions.csv"
	itsi="svd_splunk_itsi_supported_versions.csv"
	uf="svd_splunk_uf_supported_versions.csv"
	soar="svd_splunk_soar_supported_versions.csv"
	uba="svd_splunk_uba_supported_versions.csv"
	

	getMD5_current_core="$(md5sum $lookupPath/$core | awk '{ print $1 }')"
	getMD5_current_es="$(md5sum $lookupPath/$es | awk '{ print $1 }')"
	getMD5_current_itsi="$(md5sum $lookupPath/$itsi | awk '{ print $1 }')"
	getMD5_current_uf="$(md5sum $lookupPath/$uf | awk '{ print $1 }')"
	getMD5_current_soar="$(md5sum $lookupPath/$soar | awk '{ print $1 }')"
	getMD5_current_uba="$(md5sum $lookupPath/$uba | awk '{ print $1 }')"
}


### function calls
main()
{
	createTempDir

	pullSupportedVersions
	compareDownloadedTables
	
	deleteTempDir
}


compareDownloadedTables()
{
	getMD5_downloaded_core="$(md5sum $tmpDir/$core | awk '{ print $1 }'))"
	getMD5_downloaded_es="$(md5sum $tmpDir/$es | awk '{ print $1 }'))"
	getMD5_downloaded_itsi="$(md5sum $tmpDir/$itsi | awk '{ print $1 }'))"
	getMD5_downloaded_uf="$(md5sum $tmpDir/$uf | awk '{ print $1 }'))"
	getMD5_downloaded_uba="$(md5sum $tmpDir/$uba | awk '{ print $1 }'))"
	getMD5_downloaded_soar="$(md5sum $tmpDir/$soar | awk '{ print $1 }'))"
	
	if [ "$getMD5_current_core" == "$getMD5_downloaded_core" ]
		then
			return 0
		else
			eval cp ${tmpDir}/${core} ${lookupPath}/${core}
	fi
	
	if [ "$getMD5_current_es" == "$getMD5_downloaded_es" ]
		then
			return 0
		else
			eval cp ${tmpDir}/${es} ${lookupPath}/${es}
	fi
	
	if [ "$getMD5_current_itsi" == "$getMD5_downloaded_itsi" ]
		then
			return 0
		else
			eval cp ${tmpDir}/${itsi} ${lookupPath}/${itsi}
	fi
	
	if [ "$getMD5_current_uf" == "$getMD5_downloaded_uf" ]
		then
			return 0
		else
			eval cp ${tmpDir}/${uf} ${lookupPath}/${uf}
	fi
	
	if [ "$getMD5_current_uba" == "$getMD5_downloaded_uba" ]
		then
			return 0
		else
			eval cp ${tmpDir}/${uba} ${lookupPath}/${uba}
	fi
	
	if [ "$getMD5_current_soar" == "$getMD5_downloaded_soar" ]
		then
			return 0
		else
			eval cp ${tmpDir}/${soar} ${lookupPath}/${soar}
	fi
}

createTempDir()
{
	mkdir $tmpDir 2>/dev/null
}

deleteTempDir()
{
	rm -r $tmpDir
}

pullSupportedVersions()
{
	eval wget ${rawGitLocation}/${core} -O $tmpDir/$core 2> /dev/null
	eval wget ${rawGitLocation}/${es} -O $tmpDir/$es 2> /dev/null
	eval wget ${rawGitLocation}/${itsi} -O $tmpDir/$itsi 2> /dev/null
	eval wget ${rawGitLocation}/${uf} -O $tmpDir/$uf 2> /dev/null
	eval wget ${rawGitLocation}/${soar} -O $tmpDir/$soar 2> /dev/null
	eval wget ${rawGitLocation}/${uba} -O $tmpDir/$uba 2> /dev/null
}


init $@
main $?


