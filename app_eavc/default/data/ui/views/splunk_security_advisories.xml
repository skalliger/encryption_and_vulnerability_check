
<dashboard version="2" theme="dark">
    <label>Splunk Security Advisories</label>
    <description>Display information about provided Splunk Vulnerability Disclosure (SVDs) and the status in this environment. Drilldowns work on the SVD IDs only.</description>
    <definition><![CDATA[
{
	"visualizations": {
		"viz_knx5TtlZ": {
			"type": "splunk.table",
			"options": {
				"count": 55,
				"columnFormat": {
					"Severity": {
						"width": 105
					},
					"SVD": {
						"width": 138
					},
					"Description": {
						"width": 668
					},
					"CVE": {
						"width": 141
					}
				}
			},
			"dataSources": {
				"primary": "ds_AYFYEyRY"
			},
			"eventHandlers": [
				{
					"type": "drilldown.setToken",
					"options": {
						"tokens": [
							{
								"token": "tok_svd",
								"key": "value"
							}
						]
					}
				}
			]
		},
		"viz_s2pV9VOv": {
			"type": "splunk.table",
			"title": "Splunk Environment Upgrade Analysis",
			"description": "not every SVD is fixed by upgrading",
			"dataSources": {
				"primary": "ds_NJDj5nXl"
			},
			"options": {
				"showInternalFields": false,
				"columnFormat": {
					"Upgrade necessary?": {
						"data": "> table | seriesByName(\"Upgrade necessary?\") | formatByType(Upgrade_necessary_ColumnFormatEditorConfig)",
						"rowColors": "> table | seriesByName('Upgrade necessary?') | pick(Upgrade_necessary_RowColorsEditorConfig)",
						"rowBackgroundColors": "> table | seriesByName(\"Upgrade necessary?\") | matchValue(Upgrade_necessary_RowBackgroundColorsEditorConfig)",
						"width": 183
					},
					"SVD": {
						"width": 143
					},
					"Current Version": {
						"width": 174
					},
					"Product": {
						"width": 285
					},
					"Target Release": {
						"width": 181
					}
				},
				"count": 6
			},
			"context": {
				"Upgrade_necessary_ColumnFormatEditorConfig": {
					"string": {
						"unitPosition": "after"
					}
				},
				"Upgrade_necessary_RowColorsEditorConfig": [
					"#ffffff"
				],
				"Upgrade_necessary_RowBackgroundColorsEditorConfig": [
					{
						"match": "no",
						"value": "#2f8811"
					},
					{
						"match": "yes",
						"value": "#78062a"
					},
					{
						"match": "N.A.",
						"value": "#555555"
					}
				]
			}
		},
		"viz_YWBX3K1X": {
			"type": "splunk.table",
			"dataSources": {
				"primary": "ds_KMUpbcGh"
			},
			"title": "Complete SVD Mitigation Status",
			"options": {
				"count": 55,
				"columnFormat": {
					"check": {
						"data": "> table | seriesByName(\"check\") | formatByType(checkColumnFormatEditorConfig)",
						"rowColors": "> table | seriesByName('check') | pick(checkRowColorsEditorConfig)",
						"rowBackgroundColors": "> table | seriesByName(\"check\") | matchValue(checkRowBackgroundColorsEditorConfig)"
					},
					"Status": {
						"data": "> table | seriesByName(\"Status\") | formatByType(StatusColumnFormatEditorConfig)",
						"rowColors": "> table | seriesByName('Status') | pick(StatusRowColorsEditorConfig)",
						"rowBackgroundColors": "> table | seriesByName(\"Status\") | matchValue(StatusRowBackgroundColorsEditorConfig)"
					},
					"SVD": {
						"width": 298
					}
				},
				"showInternalFields": false
			},
			"context": {
				"checkColumnFormatEditorConfig": {
					"string": {
						"unitPosition": "after"
					}
				},
				"checkRowColorsEditorConfig": [
					"#ffffff"
				],
				"checkRowBackgroundColorsEditorConfig": [
					{
						"match": "mitigated",
						"value": "#2f8811"
					},
					{
						"match": "vulnerable",
						"value": "#78062a"
					}
				],
				"StatusColumnFormatEditorConfig": {
					"string": {
						"unitPosition": "after"
					}
				},
				"StatusRowColorsEditorConfig": [
					"#ffffff"
				],
				"StatusRowBackgroundColorsEditorConfig": [
					{
						"match": "mitigated",
						"value": "#2f8811"
					},
					{
						"match": "vulnerable",
						"value": "#78062a"
					},
					{
						"match": "manual check",
						"value": "#AD3F20"
					},
					{
						"match": "no action required",
						"value": "#555555"
					},
					{
						"match": "not installed",
						"value": "#2f8811"
					}
				]
			},
			"eventHandlers": [
				{
					"type": "drilldown.setToken",
					"options": {
						"tokens": [
							{
								"token": "tok_svd",
								"key": "value"
							}
						]
					}
				}
			]
		},
		"viz_lk5yLmti": {
			"type": "splunk.table",
			"title": "SVD Details",
			"dataSources": {
				"primary": "ds_mjEIOF9L"
			},
			"options": {
				"columnFormat": {
					"Fix": {
						"width": 384
					},
					"SVD": {
						"width": 203
					}
				}
			}
		},
		"viz_XdQ1t12b": {
			"type": "splunk.singlevalue",
			"title": "Total mitigated SVDs",
			"dataSources": {
				"primary": "ds_PxneHUjw"
			},
			"options": {
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"backgroundColor": "#000000",
				"majorColor": "#53a051"
			}
		},
		"viz_RVSaJVXY": {
			"type": "splunk.singlevalue",
			"title": "Total count of vulnerable SVDs",
			"dataSources": {
				"primary": "ds_1Sfkxq3d"
			},
			"options": {
				"majorValue": "> sparklineValues | lastPoint()",
				"trendValue": "> sparklineValues | delta(-2)",
				"sparklineValues": "> primary | seriesByName('count')",
				"trendColor": "#dc4e41",
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"majorColor": "#dc4e41",
				"backgroundColor": "#000000"
			},
			"eventHandlers": [
				{
					"type": "drilldown.linkToDashboard",
					"options": {
						"app": "app_eavc",
						"dashboard": "unresolved",
						"newTab": true
					}
				}
			]
		},
		"viz_JoCssv3L": {
			"type": "splunk.singlevalue",
			"title": "Total Count of SVDs",
			"dataSources": {
				"primary": "ds_B8ukx5Hk"
			},
			"options": {
				"backgroundColor": "#000000"
			}
		},
		"viz_PBKPsNRb": {
			"type": "splunk.singlevalue",
			"title": "Informational or Not Applicable",
			"dataSources": {
				"primary": "ds_VoWEkkke"
			},
			"options": {
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"backgroundColor": "#000000",
				"majorColor": "#f8be34"
			}
		},
		"viz_C2DHgTZa": {
			"type": "splunk.singlevalue",
			"title": "Requires manual check",
			"dataSources": {
				"primary": "ds_x59YyVin"
			},
			"options": {
				"sparklineDisplay": "off",
				"trendDisplay": "off",
				"majorColor": "#f1813f",
				"backgroundColor": "#000000"
			},
			"eventHandlers": [
				{
					"type": "drilldown.linkToDashboard",
					"options": {
						"app": "app_eavc",
						"dashboard": "manual_checks",
						"newTab": true
					}
				}
			]
		},
		"viz_Mu8NAtCy": {
			"type": "splunk.singlevalue",
			"dataSources": {
				"primary": "ds_RJrB81aL"
			},
			"title": "Upgrade recommended",
			"description": "by SVD",
			"options": {
				"majorColor": "#f1813f"
			},
			"eventHandlers": [
				{
					"type": "drilldown.setToken",
					"options": {
						"tokens": [
							{
								"token": "tok_upgr",
								"value": "yes"
							}
						]
					}
				}
			]
		}
	},
	"dataSources": {
		"ds_QE5DCJOA": {
			"type": "ds.search",
			"options": {
				"query": "| inputlookup svd_mitigation\n| fields *\n| search severity IN ($tok_sev$) AND cve=\"$tok_cve$\"\n",
				"queryParameters": {
					"earliest": "$tok_time.earliest$",
					"latest": "$tok_time.latest$"
				}
			},
			"name": "Get_all_SVDs"
		},
		"ds_60dLzxlf": {
			"type": "ds.search",
			"options": {
				"query": "| inputlookup svd_mitigation\n| fields severity\n| stats values(severity) AS sev\n| mvexpand sev",
				"queryParameters": {
					"earliest": "$tok_time.earliest$",
					"latest": "$tok_time.latest$"
				}
			},
			"name": "Get_all_Severities"
		},
		"ds_mjEIOF9L": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| search svd_id=\"$tok_svd$\"\n| table svd_id, note, url\n| sort - svd_id\n| rename svd_id AS SVD, note AS Fix, url AS URL"
			},
			"name": "get_specific_mitigation"
		},
		"ds_AYFYEyRY": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| search svd_id=$tok_svdName$\n| table svd_id, severity, title, cve\n| sort - svd_id\n| rename svd_id, AS SVD, severity AS Severity, title AS Description, cve AS CVE"
			},
			"name": "list_all_svds_table"
		},
		"ds_XIiWh31k": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| fields svd_id \n| search svd_id=\"$tok_svd$\" \n\n| lookup svd_upgrade_checks svd_id AS svd_id \n| rename getVersion AS coreVersion \n| lookup svd_app_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary AS upgradeNecessary2, mitFlag AS mitFlag2, label, currentVersion AS appVersion, targetVersion AS targetVersion2 \n\n| lookup svd_uf_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary AS upgradeNecessary3, mitFlag AS mitFlag3, version AS ufVersion, targetVersion AS targetVersion3, evalUf, comparable AS ufComparable, check AS ufCheck\n| eval ufComparable = mvdedup(ufComparable), ufCheck = mvdedup(ufCheck)\n| eval comparable= if(isnull(ufComparable), \"yes\", ufComparable)\n| fields - check*, *_a, *_t, mitFla*\n\n``` We're checking each SVD for each available version, so we get rid of duplicate \"yes/no\" checks. We just need the info whether upgrades are needed or not once ```\n| eval upgradeNecessary = mvdedup(upgradeNecessary), upgradeNecessary3 = mvdedup(upgradeNecessary3), coreVersion = mvdedup(coreVersion), ufVersion = mvdedup(ufVersion), evalProduct = mvdedup(evalProduct), evalUf = mvdedup(evalUf)\n| eval appVersion = mvdedup(appVersion), targetVersion2 = mvdedup(targetVersion2), targetVersion3 = mvdedup(targetVersion3)\n\n``` we only match comparable=yes due to having N possible UF versions ```\n| eval upgradeNecessary3 = if(ufComparable==\"no\" AND ufCheck==\"-\", \"no\", ufCheck)\n\n``` We're checking each SVD for each available version, so we get rid of duplicate \"yes/no\" checks. We just need the info whether upgrades are needed or not once ```\n| eval upgradeNecessary = mvdedup(upgradeNecessary), upgradeNecessary3 = mvdedup(upgradeNecessary3), coreVersion = mvdedup(coreVersion), ufVersion = mvdedup(ufVersion), evalProduct = mvdedup(evalProduct), evalUf = mvdedup(evalUf)\n| eval appVersion = mvdedup(appVersion), targetVersion2 = mvdedup(targetVersion2), targetVersion3 = mvdedup(targetVersion3)\n\n    ``` after heavy testing, my conclusion is: mvjoin, mvcombine, mvsplit and mvzip are all shit if you expect duplicates in several fields\n    you either can't even join multiple MV fields or you can't get rid of duplicates without comparing each index to the other MV field's indexes, which is near impossible the more fields you want to combine ```\n| eval upgrNec = mvappend(upgradeNecessary, upgradeNecessary2, upgradeNecessary3)\n| eval upgrNec = mvdedup(upgrNec)\n| fields - upgradeNecessary, upgradeNecessary2, upgradeNecessary3\n\n| eval versions = mvappend(coreVersion, ufVersion, appVersion)\n| eval versions = mvdedup(versions)\n| fields - coreVersion, ufVersion, appVersion\n| eval versions = if(isnull(versions), \"none\", versions)\n\n\n``` we may have target releases in several fields, but we don't really care\n    targetVersion and targetVersion3 are expected however ```\n| eval targetReleases = mvappend(targetVersion, targetVersion2, targetVersion3)\n| eval targetReleases = mvdedup(targetReleases)\n| fields - targetVersio*\n``` for a nicer display, we use the MV field to create the MV field again with a different separator ```\n| eval targetReleases_pretty = mvjoin(targetReleases, \" or \")\n| eval versions_pretty = mvjoin(versions, \", \")\n\n``` more special cases if we have multiple UF versions (gets quite complex the more versions there are) ```\n| eval check = case(\nupgrNec==\"no\" AND comparable==\"yes\" AND ufCheck==\"yes\", \"yes\",\nupgrNec==\"yes\" AND upgrNec==\"no\", \"yes\", \nupgrNec==\"yes\", \"yes\",\nupgrNec==\"no\", \"no\",\nupgrNec==\"not installed\", \"N.A.\",\n1==1, \"unknown\")\n| fields - ufCheck, ufComparable, comparable\n\n\n| eval product = case (\n    ``` special case - when an SVD affect Enterprise and UFs ```\n    (evalProduct==\"Splunk Enterprise\" AND evalUf==\"Universal Forwarder\"), mvzip(evalProduct, evalUf, \" and \"),\n    ``` put in UF ```\n    (isnull(evalProduct) AND isnull(label)), evalUf,\n    ``` put in App/Add-on name ```\n    (isnull(evalUf) AND isnull(evalProduct)), label,\n    ``` put in Splunk Enterprise ```\n    (isnull(label) AND isnull(evalUf)), evalProduct,\n    isnull(evalProduct) AND isnull(label) AND isnull(evalUf), \"none\",\n    1==1, \"unknown\"\n    ) \n| eval product = mvdedup(product)\n| fields - evalProduct, evalUf, label, targetReleases, upgrNec\n| eval product = if(isnull(product), \"none\", product) \n| where NOT (versions LIKE \"none\" AND product LIKE \"none\")\n| fields - versions "
			},
			"name": "get_mitigation_status"
		},
		"ds_KMUpbcGh": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "| fields svd_id, note\n| lookup svd_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary, mitFlag \n| lookup svd_app_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary AS upgradeNecessary2, mitFlag AS mitFlag2 \n| lookup svd_uf_upgrade_checks svd_id AS svd_id OUTPUTNEW upgradeNecessary AS upgradeNecessary3, mitFlag AS mitFlag3\n    ``` \n    This lookup gets populated by manually(!) running the \"populate_manual_checks_lookup\" report. After that, put in the lookup which ones you have checked.\n    Or simply modify the report to output a yes in the checkDone column. ``` \n| lookup svd_manual_checks svd_id AS svd_id OUTPUTNEW checkDone AS checkDone \n    ``` \n    The checks here aren't that hard, except for one situation. When we have multiple target releases for a fix AND our version is exactly one of them, we ran into issues in the past. \n    That's why we set an additional flag ONLY if our current version is exactly the same as the required version (as there are probably mutliple fixed versions listed in an SVD). \n    In that case, we don't need all the other release checks.\n    ``` \n| eval upgradeNecessary = if(isnull(upgradeNecessary) AND isnull(upgradeNecessary3), upgradeNecessary2, upgradeNecessary) \n| eval upgradeNecessary = if(isnull(upgradeNecessary) AND isnull(upgradeNecessary2), upgradeNecessary3, upgradeNecessary) \n| eval mitFlag = if(isnull(mitFlag) AND isnull(mitFlag3), mitFlag2, mitFlag) \n| eval mitFlag = if(isnull(mitFlag) AND isnull(mitFlag2), mitFlag3, mitFlag) \n| eval upgradeNecessary = mvdedup(upgradeNecessary), upgradeNecessary3 = mvdedup(upgradeNecessary3)\n\n| eval ddMit = mvdedup(mitFlag) \n| fields - mitFlag, mitFlag* \n| eval dd=if(match(ddMit, \"mitigated\"), \"no\", if(match(upgradeNecessary, \"yes\"), \"yes\", dd)) \n| eval check = case(\n    ``` OLD - need to verify this works now without checking for \"no\" and \"NOT yes\": we check for yes AND no due to checking against multiple releases. if one verison has a \"yes\", we need to upgrade ```\n    ``` dd==\"no\" AND dd!=\"yes\", \"mitigated\", ```\n    upgradeNecessary==\"no\", \"mitigated\",\n    upgradeNecessary==\"yes\", \"vulnerable\",\n    upgradeNecessary==\"not installed\", \"not installed\",\n    isnull(upgradeNecessary), \"manual check\",\n    1==1, \"unknown\"\n    ) \n    ``` get PYTHONHTTPS ``` \n| join type=left svd_id \n    [| search index=app_eavc sourcetype=\"eavc:python_https\" earliest=-14d@d \n    | stats latest(PYTHONHTTPSVERIFY) AS status \n    | eval status = case (\n        status=0, \"disabled\",\n        status=1, \"enabled\",\n        status==\"enabled\", status,\n        status==\"disabled\", status,\n        1==1, \"unknown\"\n        ) \n    | eval mitigated = case(\n        status==\"enabled\", \"mitigated\",\n        status==\"disabled\", vulnerable,\n        1==1, \"unknown\"\n        ) \n    | eval svd_id=\"SVD-2022-0601\" \n    | fields svd_id, mitigated \n    | rename mitigated AS pyMitigation ] \n    ``` get Deployment Server authentication-related SVDs \n    SVD-2022-0607, SVD-2022-0608 ``` \n| join type=left svd_id \n    [| search index=\"app_eavc\" sourcetype=\"eavc:mc_ds_auth\" earliest=-14d@d \n    | fields server, stanza, config, requireAuthentication \n    | eval DSAuthenticationInUse = case( \n        stanza==\"broker:broker\" AND (requireAuthentication=0 OR requireAuthentication==\"false\"), \"no\",\n        stanza==\"streams:deployment\" AND (requireAuthentication=0 OR requireAuthentication==\"false\"), \"no\",\n        stanza==\"broker:broker\" AND (requireAuthentication=1 OR requireAuthentication==\"true\"), \"yes\",\n        stanza==\"streams:deployment\" AND (requireAuthentication=1 OR requireAuthentication==\"true\"), \"yes\",\n        1==1, \"unknown\"\n        ) \n    | eval svd_id= mvappend(\"SVD-2022-0608\", \"SVD-2022-0607\") \n    | stats values(DSAuthenticationInUse) AS DSAuthInUse by svd_id \n    | table svd_id, DSAuthInUse \n    | eval check = case(\n        DSAuthInUse==\"no\", \"vulnerable\",\n        DSAuthInUse==\"yes\", \"mitigated\",\n        1==1, \"unknown\"\n        ) \n    | fields svd_id, check ] \n    ``` SVD-2022-0601, SVD-2022-0602, SVD-2022-0603, SVD-2022-0606 ``` \n| join type=left svd_id \n    [| search index=\"app_eavc\" sourcetype=\"eavc:mc_tls_verification\" stanza=\"*\" server=\"*\"  earliest=-14d@d\n    | fields svd_id, mitigationStatus, server, stanza, *Verify* \n    | table svd_id, mitigationStatus, server, stanza, *Verify* \n    | eval check= if(mitigationStatus==\"mitigated\", \"mitigated\", \"vulnerable\") \n    | stats values(check) AS checked by svd_id \n    | eval check = if(checked==\"vulnerable\" AND checked==\"mitigated\", \"vulnerable\", if(checked==\"mitigated\", \"mitigated\", \"vulnerable\")) ] \n| eval check = if(isnull(upgradeNecessary) AND isnull(upgradeNecessary2), \"manual check\", check)\n    ``` SVD-2022-0301 requires an extra check ``` \n| join type=left svd_id \n    [| search index=\"app_eavc\" sourcetype=\"eavc:mc_indexer_tls\" (disabled=\"0\" OR disabled=\"false\") tlsEnabled=\"true\" earliest=-14d@d \n    | stats values(tlsEnabled) AS tls \n    | eval check = if(tls==\"true\" AND tls==\"false\", \"vulnerable\", if(tls==\"true\", \"mitigated\", \"unknown\")) \n    | eval svd_id = \"SVD-2022-0301\" \n    | fields svd_id, check ] \n| eval check = case(\n    ``` here we check the lookup \"svd_manual_checks\" for any manually checked SVDs which we can't automate ```\n    (check==\"manual check\" AND (checkDone==\"yes\" OR checkDone==\"true\" OR checkDone=1)), \"mitigated\",\n    (upgradeNecessary==\"no\" AND upgradeNecessary3==\"yes\") OR (upgradeNecessary==\"yes\" AND upgradeNecessary3==\"no\"), \"vulnerable\",\n    1==1, check\n    ) \n| eval check = if(note==\"none\", \"no action required\", check) \n| fields svd_id, check \n| sort - svd_id\n| table svd_id, check *\n| rename svd_id AS SVD, check AS Status\n| search Status IN ($tok_ms_status$) AND SVD=\"$tok_svdName$\""
			},
			"name": "display_all_mitigations"
		},
		"ds_PxneHUjw": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"mitigated\"\n| stats count"
			},
			"name": "count_mitigated"
		},
		"ds_1Sfkxq3d": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"vulnerable\"\n| stats count"
			},
			"name": "count_vulnerable"
		},
		"ds_B8ukx5Hk": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_QE5DCJOA",
				"query": "|  stats count"
			},
			"name": "total_count"
		},
		"ds_VoWEkkke": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"not installed\" OR Status LIKE \"no action required\"\n| stats count"
			},
			"name": "count_not_applicable"
		},
		"ds_x59YyVin": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_KMUpbcGh",
				"query": "| where Status LIKE \"manual check\"\n| stats count"
			},
			"name": "count_manual"
		},
		"ds_RJrB81aL": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_XIiWh31k",
				"query": "| where check LIKE \"yes\"\n| stats c"
			},
			"name": "count_upgr_necessary"
		},
		"ds_NJDj5nXl": {
			"type": "ds.chain",
			"options": {
				"extend": "ds_XIiWh31k",
				"query": "| table svd_id, product, versions_pretty, check, *\n| sort - svd_id\n\n| search check=\"$tok_upgr$\" AND svd_id=\"$tok_svdName$\"\n\n| rename svd_id AS SVD, product AS Product, targetReleases_pretty AS \"Target Release\", check AS \"Upgrade necessary?\", versions_pretty AS \"Current Version\""
			},
			"name": "format_upgr_nec"
		}
	},
	"defaults": {
		"dataSources": {
			"ds.search": {
				"options": {
					"queryParameters": {
						"latest": "$global_time.latest$",
						"earliest": "$global_time.earliest$"
					}
				}
			}
		},
		"tokens": {
			"default": {
				"svd_tok": {
					"value": "*"
				},
				"tok_svd": {
					"value": "*"
				}
			}
		}
	},
	"inputs": {
		"input_global_trp": {
			"type": "input.timerange",
			"options": {
				"token": "tok_time",
				"defaultValue": "@d,now"
			},
			"title": "Time Range"
		},
		"input_0jLMFsGQ": {
			"options": {
				"items": [
					{
						"label": "All",
						"value": "*"
					}
				],
				"defaultValue": [
					"*"
				],
				"token": "tok_sev"
			},
			"title": "Severities",
			"type": "input.multiselect",
			"dataSources": {
				"primary": "ds_60dLzxlf"
			}
		},
		"input_LJp1DbeJ": {
			"options": {
				"items": [
					{
						"label": "All",
						"value": "*"
					},
					{
						"label": "Info",
						"value": "\"no action required\""
					},
					{
						"label": "Mitigated",
						"value": "\"mitigated\""
					},
					{
						"label": "Vulnerable",
						"value": "\"vulnerable\""
					},
					{
						"label": "Manual",
						"value": "\"manual check\""
					},
					{
						"label": "Not Applicable",
						"value": "\"not installed\""
					}
				],
				"defaultValue": [
					"*"
				],
				"token": "tok_ms_status"
			},
			"title": "Select Status",
			"type": "input.multiselect"
		},
		"input_yBCxNNiF": {
			"options": {
				"defaultValue": "*",
				"token": "tok_svdName"
			},
			"title": "Search for SVD ID",
			"type": "input.text"
		},
		"input_7B5DGh4k": {
			"options": {
				"defaultValue": "*",
				"token": "tok_cve"
			},
			"title": "Search for CVE",
			"type": "input.text"
		},
		"input_Sg8J89Cv": {
			"options": {
				"items": [
					{
						"label": "All",
						"value": "*"
					},
					{
						"label": "Yes",
						"value": "yes"
					},
					{
						"label": "No",
						"value": "no"
					}
				],
				"defaultValue": "*",
				"token": "tok_upgr"
			},
			"title": "Upgrade recommended",
			"type": "input.dropdown"
		},
		"input_6PN3MSBk": {
			"options": {
				"defaultValue": "*",
				"token": "tok_svd"
			},
			"title": "Reset SVD Token:",
			"type": "input.text"
		}
	},
	"layout": {
		"type": "grid",
		"options": {},
		"structure": [
			{
				"item": "viz_JoCssv3L",
				"type": "block",
				"position": {
					"x": 0,
					"y": 0,
					"w": 213,
					"h": 112
				}
			},
			{
				"item": "viz_knx5TtlZ",
				"type": "block",
				"position": {
					"x": 0,
					"y": 112,
					"w": 622,
					"h": 1981
				}
			},
			{
				"item": "viz_lk5yLmti",
				"type": "block",
				"position": {
					"x": 0,
					"y": 2093,
					"w": 1200,
					"h": 336
				}
			},
			{
				"item": "viz_PBKPsNRb",
				"type": "block",
				"position": {
					"x": 213,
					"y": 0,
					"w": 170,
					"h": 112
				}
			},
			{
				"item": "viz_XdQ1t12b",
				"type": "block",
				"position": {
					"x": 383,
					"y": 0,
					"w": 239,
					"h": 112
				}
			},
			{
				"item": "viz_RVSaJVXY",
				"type": "block",
				"position": {
					"x": 622,
					"y": 0,
					"w": 220,
					"h": 112
				}
			},
			{
				"item": "viz_YWBX3K1X",
				"type": "block",
				"position": {
					"x": 622,
					"y": 496,
					"w": 578,
					"h": 1597
				}
			},
			{
				"item": "viz_s2pV9VOv",
				"type": "block",
				"position": {
					"x": 622,
					"y": 112,
					"w": 578,
					"h": 384
				}
			},
			{
				"item": "viz_C2DHgTZa",
				"type": "block",
				"position": {
					"x": 842,
					"y": 0,
					"w": 181,
					"h": 112
				}
			},
			{
				"item": "viz_Mu8NAtCy",
				"type": "block",
				"position": {
					"x": 1023,
					"y": 0,
					"w": 177,
					"h": 112
				}
			}
		],
		"globalInputs": [
			"input_global_trp",
			"input_0jLMFsGQ",
			"input_yBCxNNiF",
			"input_7B5DGh4k",
			"input_LJp1DbeJ",
			"input_Sg8J89Cv",
			"input_6PN3MSBk"
		]
	},
	"description": "Display information about provided Splunk Vulnerability Disclosure (SVDs) and the status in this environment. Drilldowns work on the SVD IDs only.",
	"title": "Splunk Security Advisories"
}
    ]]></definition>
    <meta type="hiddenElements"><![CDATA[
{
	"hideEdit": false,
	"hideOpenInSearch": false,
	"hideExport": true
}
    ]]></meta>
</dashboard>